#library "POGLOBAL"
#include "zcommon.acs"

#define TURN_RATE 0.025
#define ANGLE_QUARTER_TURN 0.25
#define TILE_SIZE 128

#define ENCOUNTER_TEXT_X 400.0
#define ENCOUNTER_TEXT_Y 200.0
#define ENCOUNTER_NAME_Y_OFFSET 60.0

#define COMBAT_NORMAL 0
#define COMBAT_FOE 1
#define COMBAT_BOSS 2

//These are used to simulate passing multiple ints back from getPositionFromSquare
int registerX = 0;
int registerY = 0;
int registerZ = 0;

int showingInventory = 0;
int levelNum;

int currentAngle;
int squareNum;

int STEP_RATE = 8;

//Cheats/debug
script "poarsenal" (int type, int element, int power) {
    str weapons[5] = {"Pistol", "Shotgun", "Chaingun", "Launcher", "Plasma"};
    str typestring = weapons[type];
    str elements[5] = {"None", "Blue", "Red", "Green", "Yellow"};
    str elementstring = elements[element];
    str powers[5] = {"None", "Power", "Speed", "Luck", "Save"};
    str powerstring = powers[power];
    ScriptCall("DataLibrary", "AddWeapon", typestring, elementstring, powerstring);
}

script "powish" (int type) {
    str typestring = ScriptCall("DataLibrary", "ReadClassnameByID", type);
    ScriptCall("DataLibrary", "InventoryAdd", typestring, -1);
}

script "popockets" (int number) {
    ScriptCall("DataLibrary", "InventoryExpand", number);
}

script "powonga" (int amount) {
    GiveInventory("POCoin", amount);
}

script "povisit" (int sqnum) {
    GetPositionFromSquare(sqnum);
    SetActorPosition(0, registerX, registerY, registerZ, false);
}

script "poprance" (int rate) {
    ScriptCall("DataLibrary", "WriteData", "CheatForceDangerLevel", StrParam(d:rate));
}

script "povomit" (int dic) {
    ScriptCall("DataLibrary", "OutputData", dic);
}

script "poskates" (int rate) {
    if (rate > 0 && rate < 4) {
        STEP_RATE = 8 * rate;
    }
}

script "skiptownintro" (void) {
    setFlag("DoneEventGotFenceKeys");
    setFlag("blockEvent51");
    setFlag("blockEvent52");
    setFlag("firstShopConversation");
    setFlag("firstArmoryConversation");
    Floor_MoveToValue(1, 64, -80); //Open armoury door
	Thing_Remove(2); //Then fall through to the shop
}

//////////////////////////////////////////////////

script "return" RETURN {
    FadeTo(0.0, 0.0, 0.0, 1.0, 0.0);
    HudMessageBold(s:""; HUDMSG_PLAIN, 999, CR_UNTRANSLATED, 0, 0, 0, 0);
    HudMessageBold(s:""; HUDMSG_PLAIN, 998, CR_UNTRANSLATED, 0, 0, 0, 0);
	ACS_NamedExecuteAlways("enter", 0);
}

script "enter" ENTER {
	Thing_ChangeTID(0, 9999);
    ScriptCall("LevelHelper", "StopActor");
    int mapType = ScriptCall("DataLibrary", "LoadMapProperties");
    levelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
    FadeTo(0.0, 0.0, 0.0, 1.0, 0.0);
    if (mapType == 1) {
        SetMusic("POSILENT");
        SetPlayerProperty(1, 1, PROP_FROZEN);
        ScriptCall("LevelHelper", "StashWeapons");
        TakeInventory("PoDanger", CheckInventory("PoDanger"));

        ScriptCall("DataLibrary", "WriteData", "FieldMap", StrParam(d:levelNum));
        //If we're coming back from a FOE fight, destroy the FOE we marked
        ScriptCall("FOEHelper", "DestroyCurrentFOE");

        int startingSquare = ScriptCall("DataLibrary", "ReadInt", "FieldSquare");
        if (startingSquare > 0) {
            getPositionFromSquare(startingSquare);
            SetActorPosition(0, registerX, registerY, registerZ, false);
            int angleToSet = ScriptCall("DataLibrary", "ReadInt", "FieldAngle");
            SetActorAngle(0, angleToSet);
        }

        clearFlag("InFight");
        //OK, now fade in and start listening for movement!
        FadeTo(0.0, 0.0, 0.0, 0.0, 1.0);
        ACS_NamedExecute("rpgMovement", 0);
    } else if (mapType == 2) {
        ACS_NamedExecute("setupArena", 0);
    } else {
        Log(s:"\caERROR: No map type");
    }
}

script "useHomingDevice" (void) {
    //These set the teleport destination to the teleporter in town
    ScriptCall("DataLibrary", "WriteData", "FieldSquare", "11215");
    ScriptCall("DataLibrary", "WriteData", "FieldAngle", "0");
	FadeTo(1.0, 1.0, 1.0, 1.0, 1.0);
    delay(35);
    FadeTo(0.0, 0.0, 0.0, 1.0, 2.0);
    delay(70);
    //Clean up arena if in a fight
    if (ifFlag("InFight")) {
        ACS_NamedTerminate("setupArena", 0);
        ScriptCall("LevelHelper", "CleanupArena");
        Thing_Remove(999);
        SetPlayerProperty(1, 1, PROP_FROZEN);
        clearFlag("InFight");
        clearFlag("DisableHomingDevice");
        delay(1);
    }
    Teleport_NewMap(5, 0, 0);
}

script "rpgMovement" (void) {

    delay(15);
    
    switch (GetLevelInfo(LEVELINFO_LEVELNUM)) {
        case 5: SetMusic("POTOWN"); break;
        case 4: case 6: SetMusic("PODEEP"); break;
        case 2: case 7: SetMusic("POLABS"); break;
        default: SetMusic("POEXPLR"); break;
    }

	int i;
	while (true) {
		delay(1);
        
        str forcedScriptName = ScriptCall("LevelHelper", "CheckForForcedEvent");
        if (StrLen(forcedScriptName) > 0) {
            ScriptCall("DataLibrary", "WriteData", "ForceEvent", "");
            setFlag("PreventMovement");
            ACS_NamedExecuteWait(forcedScriptName, 0);
            clearFlag("PreventMovement");
        }
        
        clearFlag("BlockUseKey");
		int buttons = GetPlayerInput(0, INPUT_BUTTONS);
		int oldButtons = GetPlayerInput(0, INPUT_OLDBUTTONS);
		if (buttons & BT_LEFT) {
            SetPlayerProperty(1, 1, PROP_TOTALLYFROZEN);
			SetActorAngle(0, quantizeAngle(GetActorAngle(0)));
			int targetAngle = GetActorAngle(0) + 0.25;
			for (i = 0; i < ANGLE_QUARTER_TURN/TURN_RATE; i++) {
				ChangeActorAngle(0, GetActorAngle(0) + TURN_RATE);
				delay(1);
			}
			ChangeActorAngle(0, targetAngle);
			delay(2);
            SetPlayerProperty(1, 0, PROP_TOTALLYFROZEN);
		}
		if (buttons & BT_RIGHT) {
            SetPlayerProperty(1, 1, PROP_TOTALLYFROZEN);
			SetActorAngle(0, quantizeAngle(GetActorAngle(0)));
			targetAngle = GetActorAngle(0) - 0.25;
			for (i = 0; i < ANGLE_QUARTER_TURN/TURN_RATE; i++) {
				ChangeActorAngle(0, GetActorAngle(0) - TURN_RATE);
				delay(1);
			}
			ChangeActorAngle(0, targetAngle);
			delay(2);
            SetPlayerProperty(1, 0, PROP_TOTALLYFROZEN);
		}
		if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) {
            
            if (ifFlag("PreventMovement")) { continue; }

			//Set the angle to move depending on the player's direction
			int step_x = 0.0; int step_y = 0.0;
			currentAngle = quantizeAngle(GetActorAngle(0));
            int oldSquareNum = getSquareFromPosition(GetActorX(0), GetActorY(0));
			targetAngle = currentAngle;
			int angleAdjustment = 0.0;
			if (buttons & BT_BACK) { angleAdjustment = 0.5; }
			if (buttons & BT_MOVELEFT) { angleAdjustment = 0.25; }
			if (buttons & BT_MOVERIGHT) { angleAdjustment = -0.25; }

			targetAngle += angleAdjustment;
			if (targetAngle >= 1.0) targetAngle -= 1.0;
			if (targetAngle < 0.0) targetAngle += 1.0;

			//Now work out the X and Y components from our angle
			switch (targetAngle) {
				case 0.0: step_x = 1.0; step_y = 0.0; break;
				case 0.25: step_x = 0.0; step_y = 1.0; break;
				case 0.5: step_x = -1.0; step_y = 0.0; break;
				case 0.75: step_x = 0.0; step_y = -1.0; break;
			}
			int playerX = GetActorX(0);
			int playerY = GetActorY(0);
			int playerZ = GetActorZ(0);
            
            bool canMove = ScriptCall("LevelHelper", "PlayerCanMoveTo", step_x, step_y);
            str me = canMove ? "" : "\cgNOT ";
            
			if (!canMove) { continue; }
            
            //We can move! Let's start
            setFlag("BlockUseKey");
            PlaySound(0, ScriptCall("LevelHelper", "GetFloorSound"), CHAN_AUTO);

            //Move the player forward, incrementing Z as needed
			for (i = 0; i < TILE_SIZE/STEP_RATE; i++) {
				bool moveSuccess = SetActorPosition(0, GetActorX(0) + step_x * STEP_RATE, GetActorY(0) + step_y * STEP_RATE, GetActorZ(0), false);
				if (!moveSuccess) {
					moveSuccess = SetActorPosition(0, GetActorX(0) + step_x * STEP_RATE, GetActorY(0) + step_y * STEP_RATE, GetActorZ(0) + (2<<16), false);
				}
				if (!moveSuccess) {
					moveSuccess = SetActorPosition(0, GetActorX(0) + step_x * STEP_RATE, GetActorY(0) + step_y * STEP_RATE, GetActorZ(0) + (8<<16), false);
				}
                if (!moveSuccess) {
					moveSuccess = SetActorPosition(0, GetActorX(0) + step_x * STEP_RATE, GetActorY(0) + step_y * STEP_RATE, GetActorZ(0) + (16<<16), false);
				}
                delay(1);
			}
			SetActorPosition(0, playerX + step_x * TILE_SIZE, playerY + step_y * TILE_SIZE, GetActorZ(0), false);

			//What's our new square?
			squareNum = getSquareFromPosition(GetActorX(0), GetActorY(0));
            
            //Move turn-based things in the level forward a step here
            ScriptCall("LevelHelper", "AdvanceTurnBasedTraps");
            
            //As a result of this move, are we on a damaging floor?
            if (ScriptCall("LevelHelper", "IsOnDamagingFloor")) {
                PlaySound(0, "po/damage", CHAN_AUTO);
                DamageActor(0, AAPTR_DEFAULT, 0, AAPTR_NULL, 5, "");
            }

			//As a result of this move, have we hit an exit?
			int exitMapNum = ScriptCall("LevelHelper", "HandleMapExit");
			if (exitMapNum) {
				FadeTo(0.0, 0.0, 0.0, 1.0, 1.0);
                PlaySound(0, "po/stairs", CHAN_AUTO);
				delay(35);
				Teleport_NewMap(exitMapNum, 0, 0);
				terminate;
			}
            
            //As a result of this move, have we hit an event?
            str scriptName = ScriptCall("LevelHelper", "HandleEvent");
            if (StrLen(scriptName) > 0) {
                setFlag("PreventMovement");
                ACS_NamedExecuteWait(scriptName, 0);
                clearFlag("PreventMovement");
            }

			//As a result of this move, have we hit a FOE?
			int foeHit = ScriptCall("FOEHelper", "PlayerOverlapsAnyFOE");
			if (foeHit > 0) {
				//We've hit a FOE, so return to our square and go to an encounter!
                PlaySound(0, "po/foe/attack", CHAN_AUTO);
				SetActorPosition(0, playerX, playerY, playerZ, false);
				ACS_NamedExecute("beginEncounter", 0, foeHit, true);
				terminate; //Terminate here, as going back to this level will retrigger the script
			}

			//Now add the new square's danger value to the existing one
			int dangerValue = ScriptCall("DataLibrary", "ReadDangerValue", levelNum, squareNum);

			dangerValue = Random(max(0, dangerValue-5), dangerValue);

			GiveInventory("PoDanger", dangerValue);

			//If we're over 100 danger, this is an encounter! Time to pick a monster party
			if (CheckInventory("PoDanger") >= 100) {
				ACS_NamedExecute("beginEncounter", 0);
				terminate; //Terminate here, as going back to this level will retrigger the script
			}

			//Now move FOEs and start an encounter if one overlaps the player
			foeHit = ScriptCall("FOEHelper", "moveFOEs");
			if (foeHit > 0) {
                PlaySound(0, "po/foe/attack", CHAN_AUTO);
				ACS_NamedExecute("beginEncounter", 0, foeHit, true);
				terminate; //Terminate here, as going back to this level will retrigger the script
			}

			//We're safe!
            clearFlag("BlockUseKey");
			delay(2);
            
		}
	}
}

script "beginEncounter" (int forcedPopulation, int encounterType, int useSpecialArena) {
    ACS_NamedTerminate("rpgMovement", 0);
	str monsterParty = "";
    
    //Load the next monster party data into data library
	if (forcedPopulation > 0) {
		monsterParty = ScriptCall("DataLibrary", "ChooseMonsterPartyFromPopulationID", StrParam(d:forcedPopulation));
	} else {
		monsterParty = ScriptCall("DataLibrary", "ChooseMonsterParty", levelNum, squareNum);
	}

	ScriptCall("DataLibrary", "WriteData", "FieldSquare", StrParam(d:squareNum));
	ScriptCall("DataLibrary", "WriteData", "FieldAngle", StrParam(d:currentAngle));
    ScriptCall("DataLibrary", "WriteData", "EncounterType", StrParam(d:encounterType));
    
	FadeTo(1.0, 0.0, 0.0, 1.0, 0.0);
    if (encounterType != COMBAT_BOSS) {
        SetMusic("POFIGHT");
    } else {
        SetMusic("POBOSS");
    }
	FadeTo(1.0, 0.0, 0.0, 0.0, 0.25);
    ACS_NamedExecute("displayEncounterText", 0, encounterType);
	Delay(5);
	FadeTo(0.0, 0.0, 0.0, 1.0, 1.0);
	delay(35);

	int arenaMapNum = ScriptCall("DataLibrary", "ReadInt", "ArenaMap");
    if (useSpecialArena) {
        arenaMapNum = ScriptCall("DataLibrary", "ReadInt", "SpecialArenaMap");
    }

	Teleport_NewMap(arenaMapNum, 0, 0);
}

script "displayEncounterText" (int encounterType) {
    str partyName = ScriptCall("DataLibrary", "ReadData", "NextMonsterPartyName");
    if (encounterType == COMBAT_FOE) {
        partyName = "Pain Elemental approaching!";
    }
	SetHudSize(800, 600, false);
	delay(5);
	PlaySound(0, "po/encounter", CHAN_AUTO);
	if (encounterType > 0) { SetFont("HXT_ALRT"); } else { SetFont("HXT_ENC"); }
    HudMessageBold(s:"A"; HUDMSG_PLAIN, 999, CR_UNTRANSLATED, ENCOUNTER_TEXT_X, ENCOUNTER_TEXT_Y, 10.0);
	delay(3);
	if (encounterType > 0) { SetFont("TXT_ALRT"); } else { SetFont("TXT_ENC"); }
    HudMessageBold(s:"A"; HUDMSG_PLAIN, 999, CR_UNTRANSLATED, ENCOUNTER_TEXT_X, ENCOUNTER_TEXT_Y, 10.0);

	delay(16);
	PlaySound(0, "po/punch", CHAN_AUTO);
	SetFont("BIGFONT"); HudMessageBold(s:partyName; HUDMSG_PLAIN, 998, CR_WHITE, ENCOUNTER_TEXT_X, ENCOUNTER_TEXT_Y + ENCOUNTER_NAME_Y_OFFSET, 10.0);
	delay(2);
	HudMessageBold(s:partyName; HUDMSG_PLAIN, 998, CR_GOLD, ENCOUNTER_TEXT_X, ENCOUNTER_TEXT_Y + ENCOUNTER_NAME_Y_OFFSET, 10.0);    
}

/////////////////////////////////////

script "setupArena" (void) {

	FadeTo(0.0, 0.0, 0.0, 1.0, 0.0);
    ScriptCall("LevelHelper", "CleanupArena");
    Thing_Remove(999);
    clearFlag("BlockUseKey");
    setFlag("InFight");
    
    int encounterType = ScriptCall("DataLibrary", "ReadInt", "EncounterType");
    int arenaNumber = ScriptCall("DataLibrary", "ReadInt", "EncounterArenaNumber");
    str partyName = ScriptCall("DataLibrary", "ReadData", "NextMonsterPartyName");
	str chosenMonsterParty = ScriptCall("DataLibrary", "ReadData", "NextMonsterParty");
    if (encounterType == 1) {
        partyName = "Pain Elemental approaching!";
    }
    
    SetHudSize(800, 600, false);
    if (encounterType > 0) { SetFont("TXT_ALRT"); } else { SetFont("TXT_ENC"); } 
    HudMessageBold(s:"A"; HUDMSG_FADEOUT, 999, CR_UNTRANSLATED, ENCOUNTER_TEXT_X, ENCOUNTER_TEXT_Y, 0.5, 0.5);

    SetFont("BIGFONT"); HudMessageBold(s:partyName; HUDMSG_FADEOUT, 998, CR_GOLD, ENCOUNTER_TEXT_X, ENCOUNTER_TEXT_Y + ENCOUNTER_NAME_Y_OFFSET, 0.5, 0.5);  
	FadeTo(0.0, 0.0, 0.0, 0.0, 0.5);


    //If we don't have an arena number specified, choose a random one
	int numberOfStarts = ThingCountName("BattleStart", 0);
    if (!arenaNumber) { arenaNumber = Random(0, numberOfStarts - 1) + 1; } 
	int arenaTid = 100 * arenaNumber;

    ScriptCall("LevelHelper", "PrepareWeapons");

	int battleStartTid = arenaTid + 1;

	Thing_Move(0, battleStartTid, true);
	SetActorAngle(0, GetActorAngle(battleStartTid));
	SetPlayerProperty(1, 0, PROP_FROZEN);

	//If this is a FOE fight, do a bit extra...
	if (ScriptCall("DataLibrary", "ReadInt", "CurrentFOESquare") > 0) {
		SpawnSpotFacing("FOE", arenaTid, 999);
		delay(20);
		SetActorState(999, "Destroy");
		delay(5);
	} else {
        delay(20);
    }


	//Spawn the monsters meant to go into each slot in this arena!
	for (int i = 0; i < 10; i++) {
		str monsterClass = ScriptCall("DataLibrary", "ReadMonsterParty", chosenMonsterParty, StrParam(d:i));
		if (StrLen(monsterClass) > 0) {
			SpawnSpotFacing(monsterClass, arenaTid + i + 2, 999);
			SpawnSpot("TeleportFog", arenaTid + i + 2);
			delay(Random(5, 10));
		}
	}
	NoiseAlert(0, 0);

	while (ThingCount(T_NONE, 999) > 0) {
		delay(10);
	}
    setFlag("DisableHomingDevice");
	ACS_NamedExecute("displayClearText", 0);
    TakeInventory("PoDanger", CheckInventory("PoDanger"));
	delay(35 * 4);

	FadeTo(0.0, 0.0, 0.0, 1.0, 1.0);
	int vol = 1.0;
	for (i = 0; i < 35; i++) {
		vol -= 0.05;
		SetMusicVolume(vol);
		delay(1);
	}
    ScriptCall("LevelHelper", "CleanupArena");
	Thing_Remove(999);
    SetPlayerProperty(1, 1, PROP_FROZEN);
    ScriptCall("LevelHelper", "StopActor");
    clearFlag("InFight");
    clearFlag("DisableHomingDevice");
    delay(1);

	//Return to previous map
	int mapToReturn = ScriptCall("DataLibrary", "ReadInt", "FieldMap");
	Teleport_NewMap(mapToReturn, 0, 0);
}

script "displayClearText" (void) {
	SetHudSize(800, 600, false);
	PlaySound(0, "po/victory", CHAN_AUTO);
	SetFont("HXT_CLR"); HudMessageBold(s:"A"; HUDMSG_PLAIN, 999, CR_UNTRANSLATED, ENCOUNTER_TEXT_X, ENCOUNTER_TEXT_Y, 10.0);
	delay(3);
	SetFont("TXT_CLR"); HudMessageBold(s:"A"; HUDMSG_FADEOUT, 999, CR_UNTRANSLATED, ENCOUNTER_TEXT_X, ENCOUNTER_TEXT_Y, 3.0, 0.5); 
}


//////////////////////////////////

function int getSquareFromPosition(int x, int y) {
	int sqNum = 10000;
	sqNum += ((x>>16) / TILE_SIZE);
	sqNum += ((y>>16)*100 / TILE_SIZE);
	return sqNum;
}

function void getPositionFromSquare(int sqNum) {
	sqNum = sqNum % 10000;
	registerX = ((sqNum % 100) * TILE_SIZE) << 16;
	sqNum /= 100;
	registerY = ((sqNum % 100) * TILE_SIZE) << 16;
	SpawnForced("MapSpot", registerX, registerY, 0, 999);
	registerZ = GetActorFloorZ(999);
	Thing_Remove(999);
}

function int quantizeAngle(int angle) {
	int x = round(FixedMul(angle, 4.0));
	//Switch here to avoid fixed division errors
	switch (x) {
		case 0: case 4 << 16: x = 0; break;
		case 1 << 16: x = 0.25; break;
		case 2 << 16: x = 0.5; break;
		case 3 << 16: x = 0.75; break;
	}
	return x;
}

function int max (int a, int b) {
	return (a > b) ? a : b;
}

function void setFlag(str flag) {
    ScriptCall("DataLibrary", "WriteData", flag, "1");
}

function void clearFlag(str flag) {
    ScriptCall("DataLibrary", "WriteData", flag, "0");
}

function int ifFlag(str flag) {
    return ScriptCall("DataLibrary", "ReadInt", flag);
}
